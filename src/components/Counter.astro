---
import {
  getLastReset,
  setLastReset,
  calculateTimeSince,
} from '../utils/timer.js';
---

<div id="counter">Carregando...</div>

<script>
  import {
    getLastReset,
    setLastReset,
    calculateTimeSince,
  } from '../utils/timer.js';

  const counterElement = document.getElementById('counter');

  function formatTimeUnit(value: number, singular: string, plural: string) {
    if (value === 0) return '';
    if (value === 1)
      return `<span class="time-unit">${value}</span> ${singular}`;
    return `<span class="time-unit">${value}</span> ${plural}`;
  }

  async function updateCounter() {
    try {
      let lastReset = await getLastReset();
      if (!lastReset) {
        await setLastReset();
        lastReset = await getLastReset();
      }

      const { years, months, weeks, days, hours, minutes, seconds } =
        calculateTimeSince(lastReset);

      const parts = [];

      if (years > 0) parts.push(formatTimeUnit(years, 'ano ', 'anos '));
      if (months > 0) parts.push(formatTimeUnit(months, 'mÃªs ', 'meses '));
      if (weeks > 0) parts.push(formatTimeUnit(weeks, 'semana ', 'semanas '));
      if (days > 0) parts.push(formatTimeUnit(days, 'dia ', 'dias '));
      if (hours > 0) parts.push(formatTimeUnit(hours, 'hora ', 'horas '));
      if (minutes > 0)
        parts.push(formatTimeUnit(minutes, 'minuto ', 'minutos '));

      // Sempre mostra segundos se for a Ãºnica unidade ou se nÃ£o houver nada maior que minutos
      if (
        parts.length === 0 ||
        (years === 0 &&
          months === 0 &&
          weeks === 0 &&
          days === 0 &&
          hours === 0 &&
          minutes === 0)
      ) {
        parts.push(formatTimeUnit(seconds, 'segundo ', 'segundos '));
      }

      const filteredParts = parts.filter((p) => p !== '');

      let timeText = '';
      if (filteredParts.length === 0) {
        timeText = '<span class="time-unit">0</span> segundos';
      } else if (filteredParts.length === 1) {
        timeText = filteredParts[0];
      } else if (filteredParts.length === 2) {
        timeText = filteredParts.join(' e ');
      } else {
        const lastPart = filteredParts.pop();
        timeText = filteredParts.join(', ') + ' e ' + lastPart;
      }

      // Ajusta o tamanho da fonte baseado no comprimento do texto
      let fontSize = '2.2rem';
      const textLength = timeText.replace(/<[^>]*>/g, '').length;

      if (textLength > 80) {
        fontSize = '1.2rem';
      } else if (textLength > 60) {
        fontSize = '1.4rem';
      } else if (textLength > 40) {
        fontSize = '1.6rem';
      } else if (textLength > 30) {
        fontSize = '1.8rem';
      }

      if (counterElement) {
        counterElement.innerHTML = `<div style="display: flex; flex-direction: column; gap: 0.5rem; align-items: center;">
          <div style="font-size: ${fontSize}; font-weight: 800; word-wrap: break-word; max-width: 100%; text-align: center; line-height: 1.4;">${timeText}</div>
          <div style="font-size: 1.2rem; font-weight: 400; color: #fff; text-align: center;">Sem falar sobre o Domingo! ðŸŽ‰</div>
        </div>`;
      }
    } catch (err) {
      console.error(err);
      if (counterElement) {
        counterElement.textContent = 'Erro ao carregar o contador. ðŸ˜¢';
      }
    }
  }

  updateCounter();
  setInterval(updateCounter, 1000);
</script>
